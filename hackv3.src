//Hack v3.1.1
//Scans for vulnerabilites and makes buffer overflow attacks on ip and port or library files
//If used with -t parameter you must provide a memory and variable for a targeted attack
//If used with the -l parameter you must provide a library file path instead of an ip and a port
//If used with the -t -l parameters (or -l -t) you must provide a library file path a memory address and a variable for a targeted attack
metaxploit = include_lib("/lib/metaxploit.so")
if not metaxploit then metaxploit = include_lib(current_path + "/metaxploit.so")

c_red = "<color=#ff0000>"
c_green = "<color=#00ff00>"
c_blue = "<color=#0000ff>"
c_grey = "<color=#999999>"
c_reset = "</color>"

exploitAttack = function(ip, port, address, variable, metaLib, lanip=null)
	print("Attacking...")
	print(ip + " " + port + " " + address + " " + variable)

	if lanip then
		result = metaLib.overflow(address, variable, lanip)
	else
		result = metaLib.overflow(address, variable)
	end if

	//in case of password inject vulnerability run exploit again and request user pass
	if result == 0 then
		print("Password inject vulnerability found")
		pass = user_input("Password: ")
		if pass == "" then
			print("Password inject aborted")
		end if
		result = metaLib.overflow(address, variable, pass)
		if result == 1 then
			print(c_green + "Password inject successfull" + c_reset)
		else
			print(c_red + "Password inject failed" + c_reset)
		end if
		return c_green + "PASS INJECT" + c_reset
	end if

	read_passwd_file = function(computer)
		passwd_file = computer.File("/etc/passwd")
		if not passwd_file.has_permission("r") then print(c_red + "Can't access file. Not enough permissions" + c_reset)
		print(passwd_file.get_content)
	end function

	change_user_passwd = function(computer)
		username = user_input("Username: ")
		password = user_input("Password: ")
		res = computer.change_password(username, password)
		if res == 1	then
			print(c_green + "Password changed successfully" + c_reset)
		else
			print(c_red + res + c_reset)
		end if
	end function

	//copied from other scripts
	AccessPasswdFile = function(result)
		print("Accessing /etc/passwd")
		files = result.get_files
		for file in files
			if file.name == "passwd" or file.name == "Bank.txt" or file.name == "Mail.txt" then
				if not file.has_permission("r") then print(c_red + "Can't access file. Not enough permissions" + c_reset)
				print(c_green + "Success!"  + c_reset + " loading content...")
				print(file.get_content)
			end if
		end for
	end function

	createUserProcess = function(computer)
		user = user_input("Username: ")
		pass = user_input("Password: ")
		res = computer.create_user(user, pass)
		if res then
			print(c_green + "Success! User created " + c_reset)
		else
			print(c_red + res + c_reset)
		end if
	end function

	read_creds = function(computer, cred)
		homedir = computer.File("/home/")
		if homedir == null then exit("Error opening file")
		userdirs = homedir.get_folders
		credfiles = []
		for userdir in userdirs
			userdirfolders = userdir.get_folders
			for dir in userdirfolders
				if dir.name == "Config" then
					creds = dir.get_files
					for credfile in creds
						if cred == "b" and credfile.name == "Bank.txt" or cred == "m" and credfile.name == "Mail.txt" then
							credfiles.push(credfile)
						end if
					end for
				end if
			end for
		end for
		for file in credfiles
			print(file.get_content)
		end for
	end function

	if typeof(result) == "shell" then
		print("Shell access obtained. Do you want to run terminal?")
		option = user_input("y/n: ")
		if option == "y" then
			result.start_terminal
		end if
		return c_green + "SHELL" + c_reset
	else if typeof(result) == "file" then
		print("Accessed file " + result.path)
		while result.path != "/"
			result = result.parent
		end while
		folders = result.get_folders
		for folder in folders
			if folder.path == "/etc" then
				AccessPasswdFile(folder)
			end if
		end for
		return c_green + "FILE" + c_reset
	else if typeof(result) == "computer" then
		while true
			print("1. Print /etc/passwd file")
			print("2. Print users bank credentials")
			print("3. Print users email credentials")
			print("4. Change user password")
			print("5. Create new user")
			print("0. Exit")
			option = user_input("Option: ")
			if option == "0" then return c_green + "COMPUTER" + c_reset
			if option == "1" then read_passwd_file(result)
			if option == "2" then read_creds(result, "b")
			if option == "3" then read_creds(result, "m")
 			if option == "4" then change_user_passwd(result)
			if option == "5" then createUserProcess(result)
		end while
		return c_green + "COMPUTER" + c_reset
	end if
	return c_red + "FAILED" + c_reset
end function

scanMode = function(ip, port, metalib)
	addresses = metaxploit.scan(metaLib)

	vulns = []
	index = 0
	for address in addresses
		index = index + 1
		print(c_green + index + ".")
		print(ip + " " + port + " " + address + c_reset)
		result = metaxploit.scan_address(metaLib, address)
		print(result)
		string_arr = result.split("Unsafe")
		vars = []
		vars.push(address)
		for string in string_arr
			vars.push(string[string.indexOf("<b>")+3:string.indexOf("</b>")])
		end for
		vars.remove(1)
		vulns.push(vars)
	end for

	commands = []
	index = 0
	for vuln in vulns
		address = vuln.pull()
		for var in vuln
			index = index + 1
			command = []
			command.push(index)
			command.push(ip)
			command.push(port)
			command.push(address)
			command.push(var)
			command.push("")
			commands.push(command)
		end for
	end for

	while true
		print("-------------------------------------------------------")
		print(c_green + "					Exploits found" + c_reset)
		print("-------------------------------------------------------")
		for command in commands
			if not command[5] == "" then
				print(c_grey + "<b>" + command[0] + ".</b> " + command[1] + " " + command[2] + " " + command[3] + " " + command[4] + " " + command[5] + " " + c_reset)
			else
				print("<b>" + command[0] + ".</b> " + command[1] + " " + command[2] + " " + command[3] + " " + command[4] + " " + command[5])
			end if
		end for
		print("-------------------------------------------------------")
		print("Select memory vulnerability to exploit, or 0 to exit")
		option = user_input("Selection: ")
		if option == "0" then exit("Aborted")
		if option.to_int < 0 or option.to_int > commands.len then
			print("You must select a valid option")
		else
			type = exploitAttack(ip, port, commands[option.to_int-1][3], commands[option.to_int-1][4], metaLib)
			commands[option.to_int-1][5] = type
			user_input("Enter to continue....")
		end if
	end while
end function

if params[0] == "-help" or params[0] == "-h" then
	print("<b>You can scan an ip address and port for vulnerabilities and launch exploit attacks</b>")
	print("Example: hack 192.168.0.1 8080")
	print("<b>If you provide the -t (target) option you can target specific exploit</b>")
	print("Example: hack 192.168.0.1 8080 0x7B4E771F eslinenumentsiintl")
	print("<b>With the -l (library) parameter you must provide a library file path instead of an ip address</b>")
	print("Example: hack -t /lib/kernel.so")
	print("<b>You can combine it with the -t parameter for a targeted library attack</b>")
	print("Example: hack -t -l /lib/kernel.so 0x7B4E771F eslinenumentsiintl")
	print("<b>If you include an extra parameter at the end of a targeted attack you can use the specific router exploit that targets LAN ips</b>")
	print("Example: hack -t -l /lib/kernel_router.so 0x7B4E771F eslinenumentsiintl 10.0.5.2")
else if (params[0] == "-l" and params[1] == "-t") or (params[0] == "-t" and params[1] == "-l") then
	if params.len < 5 or params.len > 6 then
		exit("<b>Usage: "+program_path.split("/")[-1]+" -t -l [library_path] [mem_address] [variable] (opt:variable)</b>")
	end if
	libpath = params[2]
	address = params[3]
	variable = params[4]
	metaLib = metaxploit.load(libpath)
	if params.len == 6 then //in case of provided extra LAN IP address
		lanip = params[5]
		exploitAttack(ip, port, address, variable, metaLib, lanip)
	else
		exploitAttack(ip, port, address, variable, metaLib)
	end if
else if params[0] == "-t" then
	if params.len < 5 or params.len > 6 then
		exit("<b>Usage: "+program_path.split("/")[-1]+" -t [ip_address] [port] [mem_address] [variable] (opt:variable)</b>")
	end if
	ip = params[1]
	port = params[2].to_int
	address = params[3]
	variable = params[4]
	net_session = metaxploit.net_use(ip, port)
	if not net_session then exit("Error: can't connect to net session")
	metaLib = net_session.dump_lib
	if params.len == 6 then //in case of provided extra LAN IP address
		lanip = params[5]
		exploitAttack(ip, port, address, variable, metaLib, lanip)
	else
		exploitAttack(ip, port, address, variable, metaLib)
	end if
else if params[0] == "-l" then
	if params.len != 2 then
		exit("<b>Usage: "+program_path.split("/")[-1]+" -l [library_path]</b>")
	end if
	libpath = params[1]
	metaLib = metaxploit.load(libpath)
	scanMode(metaLib.lib_name, metaLib.version, metaLib)
else
	if params.len != 2 then
		exit("<b>Usage: "+program_path.split("/")[-1]+" [ip_address] [port]</b>")
	end if
	ip = params[0]
	port = params[1].to_int
	net_session = metaxploit.net_use(ip, port)
	if not net_session then exit("Error: can't connect to net session")
	metaLib = net_session.dump_lib
	scanMode(ip, port, metaLib)
end if
